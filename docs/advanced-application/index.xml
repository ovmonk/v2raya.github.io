<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>高级应用 on</title><link>https://v2raya.org/docs/advanced-application/</link><description>Recent content in 高级应用 on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 19 Aug 2021 08:48:45 +0000</lastBuildDate><atom:link href="https://v2raya.org/docs/advanced-application/index.xml" rel="self" type="application/rss+xml"/><item><title>无 ROOT 权限运行 v2rayA</title><link>https://v2raya.org/docs/advanced-application/noroot/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://v2raya.org/docs/advanced-application/noroot/</guid><description> 以非 ROOT 权限运行 v2rayA 将无法使用部分功能，例如透明代理。
然而如果你希望以 ROOT 权限运行，且已拥有 ROOT 权限而 v2rayA 判断错误，可使用 --passcheckroot 跳过 root 权限检查。
一般地，使用环境变量 V2RAYA_LITE 或命令行参数 --lite 以使用非 ROOT 权限启动 v2rayA。
如果你使用 systemd，可通过控制服务 v2raya@user.service 以使用某个用户运行，例如：
systemctl enable --now v2raya@mzz.service 注意，该服务启动后，v2rayA 默认占据 2017 端口。因此如果已有其他实例在 2017 监听，需要先将其关闭，例如：
systemctl disable --now v2raya.service</description></item><item><title>多节点分流</title><link>https://v2raya.org/docs/advanced-application/multiple-outbound-routing/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://v2raya.org/docs/advanced-application/multiple-outbound-routing/</guid><description>介绍 v2rayA 支持设置多个出站组（outbound），通过 RoutingA 可以设置根据不同的入站、源地址、目的地址等选择不同的出站，以实现各种复杂功能。
流媒体分流 流媒体分流即访问不同的流媒体时，使用不同的服务器节点。例如观看奈非时使用可观看奈非的服务器节点，而正常冲浪时使用更快速的 IPLC 节点，BT 下载时使用流量更多的荷兰服务器节点。
下面以 Netflix 和 Disney 为例讲述分流方法：
在 v2rayA 的左上方新增两个出站，名为 Netflix 和 Disney。此时我们有三个出站：proxy、Netflix、Disney。
依次选择出站，在每个出站的界面中连接特定的服务器节点。
将“透明代理”选为“与规则端口所选模式一致”；将“规则端口的分流模式”选为“RoutingA”。
如果你不使用透明代理则无需设置透明代理，只需将“规则端口的分流模式”选为“RoutingA”即可。而后使用规则端口进行代理上网。
在 RoutingA 设置中，在靠前位置插入如下规则：
domain(geosite: netflix) -&amp;gt; Netflix domain(geosite: disney) -&amp;gt; Disney 保存并应用，并在 v2rayA 管理界面左上角启动 v2ray-core。
此时，正常上网流量将使用 proxy 组，Netflix 使用 Netflix 组，而 Disney 使用 Disney 组。
如果你想使 BT 下载使用某一出站，可参考 BT 下载直连 的方法，将其中的出站名由 direct 改为特定出站即可。</description></item><item><title>指定 Docker 容器代理</title><link>https://v2raya.org/docs/advanced-application/specify-container-proxy/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://v2raya.org/docs/advanced-application/specify-container-proxy/</guid><description>指定 Docker 容器代理 此方法只能适用于 v2rayA 与要控制路由的 Docker 容器在同一台机器的情况。
透明代理使用 redirect 模式 正如 BT 下载直连 中所列方法，我们可以控制每一个桥接的 Docker 容器的路由。
当 BT 应用运行在 Docker 时，默认的网络模式使用桥接模式（&amp;ndash;network=bridge），此时容器会单独获得一个 IP 地址。而 Docker 的默认桥接网络为 172.17.0.0/16，容器会在该地址段中获取一个 IP 使用。如果我们想让所有桥接容器走直连，而特定容器走代理，可使用 RoutingA 进行控制，例如：
# 将规则插入到较前位置 source(172.17.0.213) -&amp;gt; proxy source(172.17.0.0/16) -&amp;gt; direct 上述规则使得 172.17.0.213 走代理，而 172.17.0.0/16 段直连。
当 docker 服务重启时，容器的 IP 地址可能会发生变化，因此需要固定容器的 IP 地址，方法参见 StackOverflow 上的讨论。
透明代理使用 tproxy 模式 由于一些限制，在此模式下，所有桥接容器默认直连，因此要走代理的容器需要将网络设为 host，即在容器启动时使用 --network host 参数。
注意，host 模式下该容器将无法进行端口映射，容器内部监听的端口将直接监听在宿主上，容易引起端口冲突。</description></item><item><title>BT 下载直连</title><link>https://v2raya.org/docs/advanced-application/pass-bt/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://v2raya.org/docs/advanced-application/pass-bt/</guid><description>方法 1：为 BT 应用设置单独的直连端口 大多数 BT 应用可以设置 HTTP/Socks 代理，此时为 v2rayA 开放一个直连端口，将所有 BT 流量通过该端口即可。
将“透明代理”选为“与规则端口所选模式一致”；将“规则端口的分流模式”选为“RoutingA”。
使用 RoutingA 开放一个直连端口：
inbound: socks_direct = socks(address: 0.0.0.0, port: 30000) # 下条规则需要插入靠前位置 inboundTag(socks_direct) -&amp;gt; direct 将 BT 应用的代理设置为上述直连端口。
方法 2：将 BT 应用运行在 Docker 中 与 指定 Docker 容器代理 中所列方法类似，我们可以使得在 Docker 容器中的 BT 应用直连。
此方法只能适用于 v2rayA 与要直连的 BT 应用在同一台机器的情况。
当使用 tproxy 模式时 由于透明代理实现方式为 tproxy 时，暂时无法代理桥接模式的 docker 容器，因此使用 tproxy 时所有容器都会直连，以达到目的。</description></item><item><title>解锁网易云灰色歌曲</title><link>https://v2raya.org/docs/advanced-application/unblock-netease-cloud/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://v2raya.org/docs/advanced-application/unblock-netease-cloud/</guid><description>本案例将会向你展示如何使用 nondanee/UnblockNeteaseMusic 解锁网易云音乐的灰色歌曲。
下载由 nondanee/UnblockNeteaseMusic 项目的作者提供的证书 。
信任此证书。信任的办法取决于你使用的 Linux 发行版，(archlinux/manjaro 可以使用 sudo trust anchor --store ca.crt) [ubuntu可以点我] ，其他发行版自己搜一下啦
如果你想让在 LAN 网络的苹果设备也生效, 在 Safari 打开证书 并在设置-通用-描述文件中安装。安装成功后，在设置-通用-关于本机-证书信任设置中信任此证书
Android devices need to modify the network setting you connect (such as WLAN and APN) and set proxy to port 20172. Or if you have root privileges, you can try adding the certificate to SYSTEM root cert list (not USER one) UnblockNeteaseMusic#423</description></item><item><title>群晖实现透明代理</title><link>https://v2raya.org/docs/advanced-application/synology-transparent-proxy/</link><pubDate>Sun, 06 Feb 2022 13:59:39 +0100</pubDate><guid>https://v2raya.org/docs/advanced-application/synology-transparent-proxy/</guid><description>安装也是采用Docker的方式，所以首先确认你的群晖系统是否支持Docker
补齐缺失的iptables模块 按照 Docker安装 之后，启用redirect或tproxy透明代理模式，类似旁路由模式，就会遇到iptables缺失相关的报错。群晖系统是一个定制版Linux系统，透明代理需要的iptables相关模块并没有包含，所以解决方案就是补齐缺失的iptables模块，具体参考 syno-iptables 下载安装预编译模块或者自编译。
加载缺失的模块并启动容器 在v2rayA启动时，为了确保所需的内核模块已经加载，可以覆盖默认的entrypoint为一个脚本，负责加载模块然后启动v2rayA，以下为docker run示例。
docker run -d \ --restart=always \ --privileged \ --network=host \ --name v2raya \ -e V2RAYA_ADDRESS=0.0.0.0:2017 \ -v /lib/modules:/lib/modules \ -v /etc/resolv.conf:/etc/resolv.conf \ -v /volume1/docker/v2raya-config:/etc/v2raya \ --entrypoint /etc/v2raya/bootstrap.sh \ mzz2017/v2raya 替换 /volume1/docker/v2raya-config 为你自己挂载的配置目录
以DS3617xs 6.2.3-25426为例，bootstrap.sh文件内容如下，同样存放于配置目录中。
#!/bin/sh insmod /lib/modules/nfnetlink.ko &amp;amp;&amp;gt; /dev/null insmod /lib/modules/ip_set.ko &amp;amp;&amp;gt; /dev/null insmod /lib/modules/ip_set_hash_ip.ko &amp;amp;&amp;gt; /dev/null insmod /lib/modules/xt_set.ko &amp;amp;&amp;gt; /dev/null insmod /lib/modules/ip_set_hash_net.ko &amp;amp;&amp;gt; /dev/null insmod /lib/modules/xt_mark.</description></item><item><title>高级 DNS 设置</title><link>https://v2raya.org/docs/advanced-application/advanced-dns/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://v2raya.org/docs/advanced-application/advanced-dns/</guid><description>常规用法 默认的防止 DNS 污染规则通常使用预设的 DNS 公共服务器，高级用户可使用高级 DNS 设置进行自定义。
规则如下：
223.5.5.5 -&amp;gt; direct tcp://119.29.29.29 -&amp;gt; proxy https://dns.google -&amp;gt; proxy 通常使用第一条规则进行 DNS 查询，当查询失败时将使用第二条，其后亦然。
箭头右方的“出站名”表示使用左侧的 DNS 进行查询时使用的出站出口。
使用其他 DNS 客户端 有时我们希望使用其他 DNS 客户端，例如 AdGuard 的 dnsproxy 接管本机的 DNS 请求。本节介绍如何做到这点。本节默认你已开启透明代理。
当使用 redirect 模式时 当“透明代理实现方式”使用 redirect 时，将“防止DNS污染”设为关闭即可。
将“防止DNS污染”设为关闭后，v2ray-core 将不会设置 DNS 入站，从而避免 DNS 冲突。
redirect 模式下 UDP 流量不会经过 v2ray-core，而 TCP 流量会正常进行路由分流。因此其他 DNS 客户端的非常规 DNS 查询（非 DNS over TCP 和 DNS over UDP）会被当做常规流量进行路由分流。
当使用 tproxy 模式时 当“透明代理实现方式”使用 tproxy 时，将“防止DNS污染”设为关闭即可。否则，v2ray-core 会接管发往 53 端口的 DNS 请求，从而会对收到的 DNS 请求再次进行请求。当“防止 DNS 污染”开启时，使用设置中指定的 DNS 进行请求，从而使其他 DNS 客户端的设置失效。</description></item><item><title>作为服务端进行公网传输</title><link>https://v2raya.org/docs/advanced-application/public-network-transmission/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://v2raya.org/docs/advanced-application/public-network-transmission/</guid><description>Requirements Doks uses npm to centralize dependency management, making it easy to update resources, build tooling, plugins, and build scripts:
Download and install Node.js (it includes npm) for your platform. Start a new Doks project Create a new site, change directories, install dependencies, and start development server.
Create a new site Doks is available as a child theme, and a starter theme:
Use the Doks child theme, if you do not plan to customize a lot, and/or need future Doks updates.</description></item><item><title>HTTP/Socks 带密码的入站</title><link>https://v2raya.org/docs/advanced-application/intranet-transmission/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://v2raya.org/docs/advanced-application/intranet-transmission/</guid><description>设置带密码的 HTTP/Socks5 入站 v2rayA 利用 RoutingA 可以自由开启 HTTP/Socks5 入站，并设置密码。但即使设置了密码，HTTP/Socks5 仍不适合作为公网传输，也不适合在不信任的内网环境中使用，请仅在安全的内网环境下使用它们。
将“规则端口的分流模式”选为“RoutingA”。
在 RoutingA 设置中，在靠前位置插入如下规则：
inbound: httpauthin = http(address: 0.0.0.0, port: 1081, user: user1, pass: user1pass, user:user2, pass:user2pass) inbound: socksauthin = socks(address: 0.0.0.0, port: 1082, user: 123, pass: 123) inbound: sockslocalin = socks(address: 127.0.0.1, port: 1080) 注意，不要将此处的端口和预设端口冲突。预设端口（如 20170）的关闭可在 设置-地址与端口 中进行。
如不额外设置规则，此处的入站将遵守 RoutingA 设置。如需单独指定规则，可使用 inboundTag。更多 RoutingA 用法见 RoutingA → 保存并应用即可。</description></item><item><title>将 v2rayA 部署于前缀路径中</title><link>https://v2raya.org/docs/advanced-application/nginx-prefix-deploy/</link><pubDate>Wed, 22 Jun 2022 13:59:39 +0100</pubDate><guid>https://v2raya.org/docs/advanced-application/nginx-prefix-deploy/</guid><description>Nginx 下面例子中将 v2rayA 部署到 http://example.com:8080/v2raya 。注意，例中未包含 TLS 相关配置，建议添加 TLS 相关配置。
http { map $http_upgrade $connection_upgrade { default upgrade; '' close; } server { listen 8080; server_name example.com; location ^~ /v2raya { proxy_redirect off; proxy_set_header Accept-Encoding &amp;quot;&amp;quot;; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; rewrite ^/v2raya$ / break; rewrite ^/v2raya/(.*)$ /$1 break; sub_filter '\&amp;quot;static/' '\&amp;quot;/v2raya/static/'; sub_filter '\&amp;quot;/api/' '\&amp;quot;/v2raya/api/'; sub_filter_once off; sub_filter_types application/javascript; proxy_pass http://127.0.0.1:2017; } } }</description></item></channel></rss>